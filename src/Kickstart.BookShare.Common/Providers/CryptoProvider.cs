using System;
using System.Collections.Generic;
using System.Security.Cryptography;
using System.Text;

namespace Kickstart.BookShare.Common.Providers
{
    public abstract class CryptoProvider
    {
        private const int SaltLength = 16;
        private RNGCryptoServiceProvider _cryptoServiceProvider = new RNGCryptoServiceProvider();

        /// <summary>
        /// Generates a random <see cref="SaltLength"/> lengthed array to be used as a salt value.
        /// </summary>
        /// <returns>A string representation of the randomly generated byte array</returns>
        public string GenerateRandomSalt()
        {
            byte[] salt = new byte[SaltLength];
            _cryptoServiceProvider.GetNonZeroBytes(salt);
            return ByteArrayToString(salt);
        }

        /// <summary>
        /// Gets a cryptographically calculated hash value of the given input
        /// </summary>
        /// <param name="input">The string value to be hashed</param>
        /// <returns></returns>
        public abstract string GetHash(string input);

        /// <summary>
        /// Verifies whether the hash of the given <paramref name="input"/> matches the hash value <paramref name="hash"/>
        /// </summary>
        /// <param name="input"></param>
        /// <param name="hash"></param>
        /// <returns></returns>
        public abstract bool VerifyHash(string input, string hash);

        /// <summary>
        /// Converts the given byte array <paramref name="array"/> to a string representation
        /// </summary>
        /// <param name="array"></param>
        /// <returns></returns>
        protected string ByteArrayToString(byte[] array)
        {
            var stringBuilder = new StringBuilder();

            for (int i = 0; i < array.Length; i++)
            {
                stringBuilder.Append(array[i].ToString("x2"));
            }

            return stringBuilder.ToString();
        }
    }
}
